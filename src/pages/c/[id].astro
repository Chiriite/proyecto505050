---
import Layout from '../../layouts/Layout.astro';
import CityDetailView from '../../components/CityDetailView.tsx';
import { citiesArray } from '../../hooks/useMapState';

// Required function for Astro dynamic routes - generates all possible city pages
export async function getStaticPaths() {

  return citiesArray.map((city) => ({
    params: { id: city.id.toString() },
    props: { city }
  }));
}

// Get the city from props (passed by getStaticPaths)
const { city } = Astro.props;

// Calculate navigation cities using the same cities array
const nextCity = citiesArray.find(c => c.order_number === city.order_number + 1);
const prevCity = citiesArray.find(c => c.order_number === city.order_number - 1);
---

<Layout 
  title={`${city.name} - Proyecto 50-50-50`}
  description={`Discover my running experience in ${city.name}, Spain. Run #${city.order_number} of my journey through 50 Spanish cities.`}
>
  <main class="relative w-full h-screen overflow-hidden bg-background">
    <!-- City Detail View Component -->
    <CityDetailView 
      city={city}
      nextCity={nextCity}
      prevCity={prevCity}
      client:load
    />
    
    <!-- Back to Overview Button -->
    <div class="absolute top-6 left-6 z-[1001]">
      <a 
        href="/"
        class="group relative overflow-hidden bg-black/90 border border-white/20 text-white w-12 h-12 rounded-xl backdrop-blur-2xl transition-all duration-300 ease-out hover:bg-black hover:border-primary hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-black shadow-lg shadow-black/40 hover:shadow-xl hover:shadow-primary/20 flex items-center justify-center"
        aria-label="Back to map overview"
      >
        <!-- Background glow effect -->
        <div class="absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        <!-- Icon -->
        <div class="relative z-10">
          <svg 
            class="w-5 h-5 transition-transform duration-300 group-hover:-translate-x-0.5" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width={2} 
              d="M10 19l-7-7m0 0l7-7m-7 7h18" 
            />
          </svg>
        </div>
      </a>
    </div>
  </main>

  <!-- Custom page transitions for smooth navigation -->
  <style>
    @media (prefers-reduced-motion: no-preference) {
      main {
        animation: fadeInScale 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards;
      }
    }

    @keyframes fadeInScale {
      from {
        opacity: 0;
        transform: scale(0.98);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    /* Smooth transition when navigating between cities */
    .city-transition {
      transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }
  </style>

  <!-- Enhanced page transitions script -->
  <script>
    // Handle smooth transitions between city pages
    document.addEventListener('DOMContentLoaded', () => {
      // Get city ID from URL
      const pathParts = window.location.pathname.split('/');
      const cityId = pathParts[2];
      
      if (cityId) {
        // Store the city ID for potential narrative mode navigation
        sessionStorage.setItem('currentCityId', cityId);
        
        // Check if this is a navigation from another city (narrative mode preparation)
        const fromCity = sessionStorage.getItem('fromCityId');
        if (fromCity) {
          // Add smooth transition class
          document.body.classList.add('city-transition');
          sessionStorage.removeItem('fromCityId');
        }
      }
    });

    // Enhanced navigation for narrative mode preparation
    function navigateToCity(cityId: string, smooth = true) {
      if (smooth) {
        sessionStorage.setItem('fromCityId', sessionStorage.getItem('currentCityId') || '');
      }
      window.location.href = `/c/${cityId}`;
    }

    // Keyboard navigation for narrative mode
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
        const nextButton = document.querySelector('[data-nav="next"]');
        if (nextButton) (nextButton as HTMLElement).click();
      } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
        const prevButton = document.querySelector('[data-nav="prev"]');
        if (prevButton) (prevButton as HTMLElement).click();
      } else if (e.key === 'Escape') {
        window.location.href = '/';
      }
    });
  </script>
</Layout>